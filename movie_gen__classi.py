# -*- coding: utf-8 -*-
"""movie_gen _classi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eNFyv5TxiBp050qAYpRKXLkNN6ruAF_I
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')
data=pd.read_csv('description.txt')
data.head()

def load_data(file_path):
  with open(file_path, 'r', encoding="utf-8") as f:
      data = f.readlines()
  data =[line.strip().split(' ::: ') for line in data]
  return data

train_data=load_data('train_data.txt')
train_df=pd.DataFrame(train_data, columns=['ID', 'Title', 'Genre' , 'Description'])
train_df.head()

test_data=load_data('test_data.txt')
test_df=pd.DataFrame(test_data, columns=['ID', 'Title', 'Description'])

test_solution =load_data('test_data_solution.txt')
test_solution_df=pd.DataFrame(test_solution, columns=['ID', 'Title', 'Genre' , 'Description'])

print("Train Data:")
train_df

print("\nTest Data:")
test_df

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer=TfidfVectorizer(max_features=10000)

X_train_tfidf=vectorizer.fit_transform(train_df['Description'])
X_test_tfidf=vectorizer.transform(test_df['Description'])

print( "Shape of X_train_tfidf:", X_train_tfidf.shape)
print("Shape of X_test_tfidf:", X_test_tfidf.shape)

from sklearn.preprocessing import LabelEncoder
label_encoder=LabelEncoder()
y_train_encoded=label_encoder.fit_transform(train_df['Genre'])
print("Unique generes in the training data:", label_encoder.classes_)

from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train_tfidf, y_train_encoded)

y_pred_lr = lr_model.predict(X_test_tfidf)
predicted_genres_lr = label_encoder.inverse_transform(y_pred_lr)
test_df['Predicted_Genre'] = predicted_genres_lr
test_df[['Title', 'Predicted_Genre']]

test_df['Predicted_Genre'] = predicted_genres_lr

marged_df=pd.merge( test_solution_df[['ID','Genre']], test_df[['ID', 'Predicted_Genre']], on ="ID")
marged_df

from sklearn.metrics import accuracy_score, classification_report

accuracy = accuracy_score(marged_df['Genre'], marged_df['Predicted_Genre'])
print(f"Accuracy: {accuracy:.4f}")

print("\nClassification Report:")
print(classification_report(marged_df['Genre'], marged_df['Predicted_Genre']))

from sklearn.naive_bayes import MultinomialNB
nb_mmodel = MultinomialNB()
nb_mmodel.fit(X_train_tfidf, y_train_encoded)

y_pred_nb = nb_mmodel.predict(X_test_tfidf)
predicted_genres_nb = label_encoder.inverse_transform(y_pred_nb)
test_df['Predicted_Genre_NB'] = predicted_genres_nb
merged_df_nb = pd.merge(test_solution_df, test_df[['ID', 'Predicted_Genre_NB']], on='ID')
merged_df_nb

from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import accuracy_score, classification_report

accuracy = accuracy_score(merged_df_nb['Genre'], merged_df_nb['Predicted_Genre_NB'])
print( "Naive Bayes Accuracy :"  , accuracy)

print("Naive Bayes Classification Report:")
print(classification_report(merged_df_nb['Genre'], merged_df_nb['Predicted_Genre_NB'], target_names=label_encoder.classes_))

from sklearn.svm import SVC
svm_model =SVC(kernel="linear")
svm_model.fit(X_train_tfidf, y_train_encoded)

y_pred_svm =svm_model.predict(X_test_tfidf)
predicted_genres_svm =label_encoder.inverse_transform(y_pred_svm)
test_df['Predicted_Genre_SVM'] = predicted_genres_svm
merged_df_svm = pd.merge(test_solution_df, test_df[['ID', 'Predicted_Genre_SVM']], on='ID')
# merged_df_svm
# print(classification_report(y_test,y_pred_svm))
# print(confusion_matrix(y_test,y_pred_svm))

from sklearn.metrics import accuracy_score, classification_report

accuracy_svm = accuracy_score(merged_df_svm['Genre'], merged_df_svm['Predicted_Genre_SVM'])
print("SVM Accuracy:", accuracy_svm)

print("SVM Classification Report:")
print(classification_report(merged_df_svm['Genre'], merged_df_svm['Predicted_Genre_SVM'], target_names=label_encoder.classes_))

zoner_Description = [
    'Explosive fight scenes in the city streets',
    'A haunted mansion that traps its visitors',
    'A brave adventurer in search pf lost trasure',
    'A forbidden romance in the 1920s',
    'A darling rescue mission with a love interest'
]

test_data_tfidf = vectorizer.transform(zoner_Description)

y_pred_lr = lr_model.predict(test_data_tfidf)
predicted_genres_lr = label_encoder.inverse_transform(y_pred_lr)

y_pred_nb = nb_mmodel.predict(test_data_tfidf)
predicted_genres_nb = label_encoder.inverse_transform(y_pred_nb)

y_pred_svm = svm_model.predict(test_data_tfidf)
predicted_genres_svm = label_encoder.inverse_transform(y_pred_svm)

print('Predicted Genre using Logistic Regression: ' ,predicted_genres_lr)
print('Predicted Genre using Naive Bayes: ' ,predicted_genres_nb)
print('Predicted Genre using SVM: ' ,predicted_genres_svm)
print()

for i,message in enumerate(zoner_Description):
  print(f"story: {message}")
  print(f"status:\t\tNaive Bayes Prediction : {predicted_genres_nb[i]}")
  print(f"\t\tLogistic Regression Prediction : {predicted_genres_lr[i]}")
  print(f"\t\tSVM Prediction : {predicted_genres_svm[i]}")
  print('='*100)